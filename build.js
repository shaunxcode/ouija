/**
 * Require the given path.
 *
 * @param {String} path
 * @return {Object} exports
 * @api public
 */

function require(p, parent, orig){
  var path = require.resolve(p)
    , mod = require.modules[path];

  // lookup failed
  if (null == path) {
    orig = orig || p;
    parent = parent || 'root';
    throw new Error('failed to require "' + orig + '" from "' + parent + '"');
  }

  // perform real require()
  // by invoking the module's
  // registered function
  if (!mod.exports) {
    mod.exports = {};
    mod.client = mod.component = true;
    mod.call(this, mod, mod.exports, require.relative(path));
  }

  return mod.exports;
}

/**
 * Registered modules.
 */

require.modules = {};

/**
 * Registered aliases.
 */

require.aliases = {};

/**
 * Resolve `path`.
 *
 * Lookup:
 *
 *   - PATH/index.js
 *   - PATH.js
 *   - PATH
 *
 * @param {String} path
 * @return {String} path or null
 * @api private
 */

require.resolve = function(path){
  var orig = path
    , reg = path + '.js'
    , regJSON = path + '.json'
    , index = path + '/index.js'
    , indexJSON = path + '/index.json';

  return require.modules[reg] && reg
    || require.modules[regJSON] && regJSON
    || require.modules[index] && index
    || require.modules[indexJSON] && indexJSON
    || require.modules[orig] && orig
    || require.aliases[index];
};

/**
 * Normalize `path` relative to the current path.
 *
 * @param {String} curr
 * @param {String} path
 * @return {String}
 * @api private
 */

require.normalize = function(curr, path) {
  var segs = [];

  if ('.' != path.charAt(0)) return path;

  curr = curr.split('/');
  path = path.split('/');

  for (var i = 0; i < path.length; ++i) {
    if ('..' == path[i]) {
      curr.pop();
    } else if ('.' != path[i] && '' != path[i]) {
      segs.push(path[i]);
    }
  }

  return curr.concat(segs).join('/');
};

/**
 * Register module at `path` with callback `fn`.
 *
 * @param {String} path
 * @param {Function} fn
 * @api private
 */

require.register = function(path, fn){
  require.modules[path] = fn;
};

/**
 * Alias a module definition.
 *
 * @param {String} from
 * @param {String} to
 * @api private
 */

require.alias = function(from, to){
  var fn = require.modules[from];
  if (!fn) throw new Error('failed to alias "' + from + '", it does not exist');
  require.aliases[to] = from;
};

/**
 * Return a require function relative to the `parent` path.
 *
 * @param {String} parent
 * @return {Function}
 * @api private
 */

require.relative = function(parent) {
  var p = require.normalize(parent, '..');

  /**
   * lastIndexOf helper.
   */

  function lastIndexOf(arr, obj){
    var i = arr.length;
    while (i--) {
      if (arr[i] === obj) return i;
    }
    return -1;
  }

  /**
   * The relative require() itself.
   */

  function fn(path){
    var orig = path;
    path = fn.resolve(path);
    return require(path, parent, orig);
  }

  /**
   * Resolve relative to the parent.
   */

  fn.resolve = function(path){
    // resolve deps by returning
    // the dep in the nearest "deps"
    // directory
    if ('.' != path.charAt(0)) {
      var segs = parent.split('/');
      var i = lastIndexOf(segs, 'deps') + 1;
      if (!i) i = 0;
      path = segs.slice(0, i + 1).join('/') + '/deps/' + path;
      return path;
    }
    return require.normalize(p, path);
  };

  /**
   * Check if module is defined at `path`.
   */

  fn.exists = function(path){
    return !! require.modules[fn.resolve(path)];
  };

  return fn;
};require.register("ouija/index.js", function(module, exports, require){
// Generated by CoffeeScript 1.3.3
(function() {

  $.fn.ouija = function() {
    var self;
    self = this;
    this.hide();
    return this.each(function(i, select) {
      var $list, $planchette, $select, active, dragging, selected;
      $select = $(select);
      $select.after($list = $("<ul />").addClass("ouijaBoard"));
      $list.addClass($select.prop("class"));
      selected = 0;
      active = false;
      $("option", $select).each(function(index) {
        var $li, $option;
        $option = $(this);
        if ($option.is(":selected")) {
          selected = index;
        }
        return $list.append($li = $("<li />").droppable({
          hoverClass: "onHover",
          drop: function() {
            var dragging;
            dragging = false;
            return $li.click();
          }
        }).addClass("ouija-" + ($option.prop("value"))).text($option.text()).on({
          click: function() {
            var bw;
            $select.val($option.prop("value"));
            $select.trigger("change");
            if (typeof active.removeClass === "function") {
              active.removeClass("on");
            }
            active = $li;
            bw = (parseInt($planchette.css("border-width"))) * 2;
            $planchette.prop("class", "planchette");
            return $planchette.animate({
              top: $li.position().top,
              left: $li.position().left,
              width: $li.outerWidth() - bw,
              height: $li.outerHeight() - bw
            }, 150, function() {
              $("li", $list).removeClass("on");
              $planchette.addClass("ouija-on-" + ($option.prop("value")));
              return $li.addClass("on");
            });
          }
        }));
      });
      $list.append($planchette = $("<div />").addClass("planchette").css({
        height: $list.height()
      }));
      dragging = false;
      $planchette.on({
        click: function() {
          var first, next;
          if (dragging) {
            return;
          }
          next = active.nextAll("li").first();
          if (next.length) {
            return $(next).click();
          } else {
            first = active.prevAll("li").last();
            if (first.length) {
              return $(first).click();
            }
          }
        }
      });
      $planchette.draggable({
        containment: "parent",
        start: function() {
          if (active != null) {
            active.removeClass("on");
          }
          return dragging = true;
        },
        stop: function() {
          return setTimeout((function() {
            return dragging = false;
          }), 100);
        }
      });
      return $("li", $list).eq(selected).click();
    });
  };

  module.exports = function(selector) {
    return $(selector).ouija();
  };

}).call(this);

});
